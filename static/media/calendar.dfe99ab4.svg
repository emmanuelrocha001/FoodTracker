<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" height="512px" viewBox="0 0 512 512" width="512px" class=""><g><script xmlns="" id="metastreaminitscript">(function() {
    document.getElementById('metastreaminitscript').remove()

    const INIT_TIMEOUT = 5e3
    const isFirefox = navigator.userAgent.toLowerCase().includes('firefox')

    //=========================================================================
    // document.createElement proxy
    //=========================================================================

    window.__metastreamMediaElements = new Set()

    // Proxy document.createElement to trap media elements created in-memory
    const origCreateElement = document.createElement
    const proxyCreateElement = function() {
      const element = origCreateElement.apply(document, arguments)
      if (window.__metastreamMediaElements &amp;&amp; element instanceof HTMLMediaElement) {
        window.__metastreamMediaElements.add(element)
      }
      return element
    }
    proxyCreateElement.toString = origCreateElement.toString.bind(origCreateElement)
    document.createElement = proxyCreateElement

    setTimeout(() =&gt; {
      if (window.__metastreamMediaElements) {
        window.__metastreamMediaElements.clear()
        window.__metastreamMediaElements = undefined
      }
    }, INIT_TIMEOUT)

    //=========================================================================
    // navigator.mediaSession proxy (Firefox)
    //=========================================================================

    if (isFirefox) {
      // stub out MediaSession API until Firefox supports this natively
      if (!navigator.mediaSession) {
        const noop = () =&gt; {}
        const mediaSessionStub = {
          __installedByMetastreamRemote__: true,
          setActionHandler: noop
        }
        Object.defineProperty(window.navigator, 'mediaSession', {
          value: mediaSessionStub,
          enumerable: false,
          writable: true
        })

        function MediaMetadata(metadata) {
          Object.assign(this, metadata)
        }
        window.MediaMetadata = MediaMetadata
      }

      const { mediaSession } = navigator

      // Capture action handlers for player.js proxy
      mediaSession._handlers = {}

      const _setActionHandler = mediaSession.setActionHandler
      mediaSession.setActionHandler = function(name, handler) {
        mediaSession._handlers[name] = handler
        _setActionHandler.apply(mediaSession, arguments)
      }
    }

    //=========================================================================
    // document.domain fix (Firefox)
    //=========================================================================

    if (isFirefox) {
      const domains = ['twitch.tv', 'crunchyroll.com']

      // Fix for setting document.domain in sandboxed iframe
      try {
        const { domain } = document
        if (domain &amp;&amp; domains.some(d =&gt; domain.includes(d))) {
          Object.defineProperty(document, 'domain', {
            value: domain,
            writable: true
          })
        }
      } catch (e) {}
    }

    //=========================================================================
    // Inline script embed prevention fix
    //=========================================================================

    const observeScripts = () =&gt; {
      const scriptSnippets = [
        { code: 'window.top !== window.self', replacement: 'false' },
        { code: 'self == top', replacement: 'true' },
        { code: 'top.location != window.location', replacement: 'false' }
      ]

      const getAddedScripts = mutationList =&gt;
        mutationList.reduce((scripts, mutation) =&gt; {
          if (mutation.type !== 'childList') return scripts
          const inlineScripts = Array.from(mutation.addedNodes).filter(
            node =&gt; node instanceof HTMLScriptElement &amp;&amp; node.innerHTML.length &gt; 0
          )
          return inlineScripts.length &gt; 0 ? [...scripts, ...inlineScripts] : scripts
        }, [])

      // Modifies inline scripts to allow embedding content in iframe
      const inlineScriptModifier = mutationsList =&gt; {
        const scripts = getAddedScripts(mutationsList)
        for (let script of scripts) {
          for (let snippet of scriptSnippets) {
            if (script.innerHTML.includes(snippet.code)) {
              script.innerHTML = script.innerHTML.split(snippet.code).join(snippet.replacement)
            }
          }
        }
      }

      const observer = new MutationObserver(inlineScriptModifier)
      observer.observe(document.documentElement, { childList: true, subtree: true })

      // Stop watching for changes after we finish loading
      window.addEventListener('load', () =&gt; observer.disconnect())
    }

    observeScripts()
  }());</script><path d="m490.667969 171.519531h-469.335938c-11.773437 0-21.332031 9.558594-21.332031 21.332031v255.148438c0 35.285156 28.714844 64 64 64h384c35.285156 0 64-28.714844 64-64v-255.148438c0-11.773437-9.558594-21.332031-21.332031-21.332031zm0 0" fill="#eceff1" data-original="#ECEFF1" class="active-path" style="fill:#606C88" data-old_color="#eceff1"/><path d="m448 64h-384c-35.347656 0-64 28.652344-64 64v64.851562h512v-64.851562c0-35.347656-28.652344-64-64-64zm0 0" fill="#2196f3" data-original="#2196F3" class="" style="fill:#F3C623" data-old_color="#2196f3"/><g fill="#1976d2"><path d="m128 0h-21.332031c-11.777344 0-21.335938 9.558594-21.335938 21.332031v85.335938c0 11.773437 9.558594 21.332031 21.335938 21.332031h21.332031c11.777344 0 21.332031-9.558594 21.332031-21.332031v-85.335938c0-11.773437-9.554687-21.332031-21.332031-21.332031zm0 0" data-original="#1976D2" class="" data-old_color="#1976D2" style="fill:#F3C623"/><path d="m405.332031 0h-21.332031c-11.777344 0-21.332031 9.558594-21.332031 21.332031v85.335938c0 11.773437 9.554687 21.332031 21.332031 21.332031h21.332031c11.777344 0 21.335938-9.558594 21.335938-21.332031v-85.335938c0-11.773437-9.558594-21.332031-21.335938-21.332031zm0 0" data-original="#1976D2" class="" data-old_color="#1976D2" style="fill:#F3C623"/></g></g> </svg>
